Git шпора э
Система контроля версий, или VCS (SCM), — программа, позволяющая контролировать изменения в проекте.
Git — один из примеров системы контроля версий: он позволяет хранить, изменять и анализировать историю проекта.
Git — незаменимый в команде инструмент, ведь он помогает объединять результаты работы нескольких человек.

Узнать, где вы сейчас, поможет команда pwd.

Права супер пользователя sudo ; запустить предыдущую команду от имени суперпользователь sudo !! ; 




ОЧИСТИТЬ ОКНО ТЕРМИНАЛА команда clear



Перейти к домашней директории - нужно ввести команду cd и символ ~ — обозначение домашней директории

Вывести содержимое директории — ls

Просматривать содержимое вместе со скрытыми файлами и папками через ls -a.

Если в названии папки есть пробелы, при вводе нужно использовать кавычки.

Чтобы вернуться в родительскую директорию — то есть на уровень выше, — вместо названия папки нужно написать две точки: ..

Есть ещё одна команда с точкой. Чтобы обратиться к текущей директории, можно использовать . Но это нужно довольно редко — например, для запуска скриптов и программ, которые принимают папку в качестве параметра.

Также cd позволяет перемещаться сразу через несколько директорий. Для этого нужно разделить их названия знаком /.

Создать файл, нужно ввести в консоль команду touch с именем файла в качестве параметра и расширением.

Для создания директорий через терминал используют другую команду — mkdir
Можно создать целую структуру директорий одной командой с помощью флага -p. (В папке папка и т.д., прописывается через /)

Также можно использовать обе команды вместе с символом домашней директории (~ - тильда) или родительской директории (..). Например, команда mkdir ~/my-git-projects создаст папку my-git-projects внутри домашней директории.

Для копирования файлов через терминал существует команда cp (что копируем куда копируем при этом что копируем может быть несколько)


Для перемещения файла из одной директории в другую используется команда mv, при этом синтаксис аналогичен синтаксису cp.

Чтобы прочитать файл, в консоль нужно ввести cat

Чтобы удалить файл, нужно напечатать команду rm (удалить все файлы команда rm * - удалит все файлы; удалить файлы с определенным разрешением rm *.txt - к примеру)

Удалить папку можно командой rmdir

Удалить вместе со всем её содержимым, можно использовать команду rm -r

Выполнение сразу нескольких команд можно осуществлять через указание амперсандов (&&)

Ещё один способ использовать Tab при навигации в другую директорию. Если ввести cd с названием папки, а затем нажать Tab, в консоль в качестве подсказки выведутся все возможные пути.

Git config user.name "Daniil Rodionov" - указать в конфигурациях имя пользователя
Git config --global user.name "Daniil Rodionov" - указать в конфигурациях Везде имя пользователя
Git config user.email "Daniel-rus@mail.ru" - указать в конфигурациях почту пользователя
Git config --global user.email "Daniel-rus@mail.ru" - указать в конфигурациях Везде почту пользователя

Настройки Git хранит в файл .gitconfig в домашней директорки (~/.gitconfig) / либо вывести содержимое файлаgit config --list



Репозитории основы работы с гитхаб

Чтобы Git начал отслеживать изменения в проекте, папку с файлами этого проекта нужно сделать Git-репозиторием (от англ. repository — «хранилище»). Для этого следует переместиться в неё и ввести команду git init (от англ. initialize — «инициализировать»).

«Разгитить» папку, если что-то пошло не так, — rm -rf .git
ключ -r (от англ. recursive — «рекурсивно») позволяет удалять папки вместе с их содержимым
ключ -f (от англ. force — «заставить») избавит вас от вопросов вроде «Вы точно хотите удалить этот файл? А этот? И этот тоже?».
Если удалить .git, то вся история проекта будет стёрта без возможности восстановления

Проверить состояние репозитория — git status

Подготовить файлы к сохранению — git add / либо git add --all ( флаг --all  позволяет подготовить все файлы в репозитории) / Также можно добавить текущую папку целиком — в этом случае все файлы в ней тоже будут добавлены - git add .

Выполнить коммит — git commit с флагом -m , т.е.  git commit -m "first commit"  - присвоить комментарий к файлам из git add
У первого комета будет выведена информация root-commit - это самый первый кормит в ветке

Сначала команда git add сообщает Git, какие именно файлы нужно сохранить и какую их версию. Затем с помощью команды git commit происходит само сохранение. 

Просмотреть историю коммитов — git log




Ssh ключ


SSH — протокол, который обеспечивает безопасный обмен данными в сети и использует для этого ключи.
SSH-ключ — ваш виртуальный идентификатор в GitHub. Как ключ от квартиры, он позволяет получить доступ к GitHub-репозиторию. Также SSH используется для доступа к другим удалённым серверам.
SSH-ключ состоит из двух частей — публичной и приватной. Публичный ключ зашифрует данные, а приватный — расшифрует. Приватным ключом ни в коем случае нельзя делиться, иначе любой сможет расшифровать все ваши секреты!


По умолчанию директория с SSH-ключами находится в домашней директории пользователя. Перейдите в неё. Обычно SSH-ключи находятся в директории .ssh/. Проверить наличие этой директории и файлов в ней можно с помощью следующей команды  ls -la .ssh/
Ищем файлы с похожими названиями id_rsa.pub , если есть то их все надо удалить

Чтобы взять код ключ, надо
Перейти в домашню директорию cd ~, потом в папку с ключами через cd .ssh
Далее просто, cat id_rsa.pub, это для для всех осей)), но у нас мак и поэтому: $ pbcopy < ~/.ssh/id_rsa.pub
команда pbcopy — она копирует поток данных в буфер обмена все содержимое файла

Проверить правильность ключа с помощью следующей команды 
ssh -T git@github.com




Back to repositary)

Привязать удалённый репозиторий к локальному — перейдите в каталог локального репозитория и введите команду  git remote add origin и далее url удаленного репозитория
Origin - это имя — стандартный псевдоним, с помощью которого можно обращаться к главному удалённому репозиторию

Убедиться, что репозитории связаны, — git remote -v
Флаг -v — короткая форма флага --verbose (англ. «подробный»). Он позволяет показать больше информации в выводе

Отправить изменения на удалённый репозиторий — git push
В первый раз эту команду нужно вызвать с флагом -u и параметрами origin (имя удалённого репозитория) и main или master (название текущей ветки). Флаг -u свяжет локальную ветку с одноимённой удалённой: git push -u origin main


Получить сокращённый лог можно с помощью команды git log с флагом --oneline

Файл HEAD (англ. «голова», «головной») — один из служебных файлов папки .git. Он указывает на коммит, который сделан последним (то есть на самый новый). Если нужно передать последний коммит, то вместо его хеша можно просто написать слово HEAD — Git поймёт, что вы имели в виду последний коммит.




Статусы файлов в Git 

untracked (англ. «неотслеживаемый») 
 Мы говорили, что новые файлы в Git-репозитории помечаются как untracked, то есть неотслеживаемые. Git «видит», что такой файл существует, но не следит за изменениями в нём. У untracked-файла нет предыдущих версий, зафиксированных в коммитах или через команду git add. 


staged (англ. «подготовленный»)
  После выполнения команды git add файл попадает в staging area (от англ. stage — «сцена», «этап [процесса]» и area — «область»), то есть в список файлов, которые войдут в коммит. В этот момент файл находится в состоянии staged.

(Staging area также называют index (англ. «каталог») или cache (англ. «кеш»), а состояние файла staged иногда называют indexed или cached.
Все три варианта могут встречаться в документации и в качестве флагов команд Git. А также в интернете — например, в вопросах и ответах на сайте Stack Overflow.)


tracked (англ. «отслеживаемый») 
 Состояние tracked — это противоположность untracked. Оно довольно широкое по смыслу: в него попадают файлы, которые уже были зафиксированы с помощью git commit, а также файлы, которые были добавлены в staging area командой git add. То есть все файлы, в которых Git так или иначе отслеживает изменения. 

modified (англ. «изменённый») 
 Состояние modified означает, что Git сравнил содержимое файла с последней сохранённой версией и нашёл отличия. Например, файл был закоммичен и после этого изменён.

Для файлов в состояниях staged и modified обычно не указывают, что они также tracked, потому что это состояние подразумевается.



Внести правки в уже сделанный коммит с помощью опции --amend (от англ. amend — «исправить», «дополнить») у команды commit: git commit --amend. Работает только с последним коммитом (HEAD)
полнить коммит новыми файлами можно с помощью git commit --amend --no-edit. Благодаря опции --no-edit сообщение к коммиту останется таким, каким и было.

Изменить сообщение коммита — git commit --amend -m "Новое сообщение"

Убрать файл из staging поможет команда git restore --staged <file>
Чтобы «сбросить» все файлы из staged обратно в untracked/modified, можно воспользоваться командой git restore --staged .: она сбросит всю текущую папку (.).

«Откатить» коммит — git reset --hard <commit hash>

Может быть так, что вы случайно изменили файл, который не планировали. Теперь он отображается в Changes not staged for commit (modified). Чтобы вернуть всё «как было», можно выполнить команду git restore <file>.

апустите git diff, чтобы выяснить детали. Эта команда сравнит последнюю закоммиченную версию файла с текущей (изменённой) версией.
Самое важное git diff выводит в конце:
красный цвет строки  значит, что эта строка была удалена;
зелёный цвет строки  значит, что она была добавлена.
Не все консоли умеют выводить цвета, поэтому строки помечаются не только цветом, но и знаком - или +. Минус — это удалённые строки, плюс — это добавленные.
*Передайте команде git diff хеши обоих коммитов. Состояние файлов на момент первого переданного коммита будет сравниваться с состоянием файлов на момент второго.
git diff --staged показывает, что изменилось в проиндексированных файлах.
Ключ --staged говорит системе, что нужно смотреть изменения, которые были добавлены в staged.


Дописываем строку в файл : Для этого подходит команда echo 
echo "Вторая строка файла" >> file.txt
если скомбинировать echo с символами перенаправления вывода >> (два знака «больше»), то всё, что должно было попасть на экран, вместо этого будет записано в файл.
Оператор >> — это возможность командной строки (Bash). Его можно использовать не только с echo, но и с любой другой командой, которая выводит что-то на экран.
Одинарный символ > тоже перенаправит вывод команды в файл, но перед этим сотрёт содержимое файла, то есть перезапишет файл целиком,  после использования символа > Первая строка файла исчезла.



Чтобы Git игнорировал такие файлы и не пытался добавить их в репозиторий, нужно создать файл .gitignore (от англ. ignore — «игнорировать») и записать в него названия игнорируемых файлов. В простейшем случае в .gitignore указывают все файлы, которые нужно игнорировать (по одному имени на строку). Но часто удобнее использовать шаблоны. Шаблон, или правило, — это способ указать сразу на несколько файлов с однотипными названиями.

Комментарий
Если строка начинается с #, то это комментарий, и .gitignore не будет его учитывать.

Просто название файла
Допустим, нужно, чтобы Git игнорировал все файлы .DS_Store. Для этого достаточно добавить в .gitignore строку с названием файла.

Звёздочка (*)

Символ звёздочки (*) соответствует любой строке, включая пустую. Если такой символ используется в шаблоне в .gitignore, значит, файл будет проигнорирован вне зависимости от того, что будет на месте звёздочки.

Вопросительный знак (?)
Вопросительный знак ? соответствует одному любому символу.

Квадратные скобки ([…])
Квадратные скобки, как и вопросительный знак, соответствуют одному символу. При этом символ не любой, а только из списка, который указан в скобках.
В скобках можно либо перечислить символы ([abc]), либо задать диапазон ([a-z])

Слеш (/)
Косая черта, или слеш (/), указывает на каталоги. Если шаблон в .gitignore начинается со слеша, то Git проигнорирует файлы или каталоги только в корневой директории.

Парные звёздочки (**)
Функция парных звёздочек (**) похожа на функцию одинарной (*). Отличие в том, как они работают с вложенными папками. Двойная звёздочка может соответствовать любому количеству таких папок (в том числе нулю). Одинарная может соответствовать только одной.

Восклицательный знак (!)
Любое правило в файле .gitignore можно инвертировать с помощью восклицательного знака (!).

Игнорируемые файлы не отображаются в выводе команды git status, иначе они бы засоряли вывод.

Если всё же нужно отобразить все игнорируемые файлы, то это можно сделать с помощью ключа --ignored: git status --ignored. В таком случае в выводе git status появится раздел Ignored files.





Клонировать репозиторий — git clone


21_01



